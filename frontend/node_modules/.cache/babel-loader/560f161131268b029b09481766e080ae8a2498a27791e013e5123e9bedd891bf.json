{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\CCRMS\\\\CCRMS_ORIGINAL\\\\ccmrs\\\\src\\\\template.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as ee from '@google/earthengine';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapComponent() {\n  _s();\n  const mapRef = useRef(null);\n  useEffect(() => {\n    // Initialize the Leaflet map\n    const map = L.map(mapRef.current).setView([37.7749, -122.4194], 8);\n\n    // Add a base layer to the map (OpenStreetMap)\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; OpenStreetMap contributors'\n    }).addTo(map);\n\n    // Authenticate with Earth Engine (make sure you handle auth correctly)\n    ee.initialize().then(() => {\n      // Load greenhouse gas data\n      const greenhouseGasData = ee.ImageCollection('MODIS/MYD04_L2').filterDate('2023-01-01', '2023-12-31').select('AOT_550');\n\n      // Create a visualization parameters object\n      const visualizationParams = {\n        min: 0,\n        max: 1000,\n        palette: ['blue', 'green', 'yellow', 'orange', 'red']\n      };\n\n      // Get the tile layer URL from Earth Engine\n      greenhouseGasData.getMap(visualizationParams, mapLayer => {\n        L.tileLayer(mapLayer.urlTemplate).addTo(map);\n      });\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    style: {\n      width: '100%',\n      height: '800px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 10\n  }, this);\n}\n_s(MapComponent, \"9mn7MMe4fPaZ50ApsOpRWF2HbFg=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useRef","ee","L","jsxDEV","_jsxDEV","MapComponent","_s","mapRef","map","current","setView","tileLayer","attribution","addTo","initialize","then","greenhouseGasData","ImageCollection","filterDate","select","visualizationParams","min","max","palette","getMap","mapLayer","urlTemplate","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Projects/CCRMS/CCRMS_ORIGINAL/ccmrs/src/template.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as ee from '@google/earthengine';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nfunction MapComponent() {\r\n  const mapRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Initialize the Leaflet map\r\n    const map = L.map(mapRef.current).setView([37.7749, -122.4194], 8);\r\n\r\n    // Add a base layer to the map (OpenStreetMap)\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution: '&copy; OpenStreetMap contributors',\r\n    }).addTo(map);\r\n\r\n    // Authenticate with Earth Engine (make sure you handle auth correctly)\r\n    ee.initialize().then(() => {\r\n      // Load greenhouse gas data\r\n      const greenhouseGasData = ee.ImageCollection('MODIS/MYD04_L2')\r\n        .filterDate('2023-01-01', '2023-12-31')\r\n        .select('AOT_550');\r\n\r\n      // Create a visualization parameters object\r\n      const visualizationParams = {\r\n        min: 0,\r\n        max: 1000,\r\n        palette: ['blue', 'green', 'yellow', 'orange', 'red'],\r\n      };\r\n\r\n      // Get the tile layer URL from Earth Engine\r\n      greenhouseGasData.getMap(visualizationParams, (mapLayer) => {\r\n        L.tileLayer(mapLayer.urlTemplate).addTo(map);\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  return <div ref={mapRef} style={{ width: '100%', height: '800px' }} />;\r\n}\r\n\r\nexport default MapComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,qBAAqB;AACzC,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAMC,MAAM,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE3BD,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,GAAG,GAAGN,CAAC,CAACM,GAAG,CAACD,MAAM,CAACE,OAAO,CAAC,CAACC,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;;IAElE;IACAR,CAAC,CAACS,SAAS,CAAC,oDAAoD,EAAE;MAChEC,WAAW,EAAE;IACf,CAAC,CAAC,CAACC,KAAK,CAACL,GAAG,CAAC;;IAEb;IACAP,EAAE,CAACa,UAAU,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;MACzB;MACA,MAAMC,iBAAiB,GAAGf,EAAE,CAACgB,eAAe,CAAC,gBAAgB,CAAC,CAC3DC,UAAU,CAAC,YAAY,EAAE,YAAY,CAAC,CACtCC,MAAM,CAAC,SAAS,CAAC;;MAEpB;MACA,MAAMC,mBAAmB,GAAG;QAC1BC,GAAG,EAAE,CAAC;QACNC,GAAG,EAAE,IAAI;QACTC,OAAO,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK;MACtD,CAAC;;MAED;MACAP,iBAAiB,CAACQ,MAAM,CAACJ,mBAAmB,EAAGK,QAAQ,IAAK;QAC1DvB,CAAC,CAACS,SAAS,CAACc,QAAQ,CAACC,WAAW,CAAC,CAACb,KAAK,CAACL,GAAG,CAAC;MAC9C,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOJ,OAAA;IAAKuB,GAAG,EAAEpB,MAAO;IAACqB,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACxE;AAAC5B,EAAA,CAlCQD,YAAY;AAAA8B,EAAA,GAAZ9B,YAAY;AAoCrB,eAAeA,YAAY;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}