{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\CCRMS\\\\CCRMS_ORIGINAL\\\\ccmrs\\\\src\\\\template.js\";\nimport React, { useEffect, useRef } from 'react';\nimport * as ee from '@google/earthengine';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MyComponent extends React.Component {\n  render() {\n    var _s = $RefreshSig$();\n    function MapComponent() {\n      _s();\n      const mapRef = useRef(null);\n      useEffect(() => {\n        ee.initialize({\n          accessToken: 'YOUR_ACCESS_TOKEN'\n        });\n\n        // Create a map instance\n        const map = new ee.Map(mapRef.current, {\n          center: [37.7749, -122.4194],\n          // Initial center (San Francisco)\n          zoom: 8\n        });\n\n        // Load your greenhouse gas data (replace with your actual data)\n        const greenhouseGasData = ee.ImageCollection('MODIS/MYD04_L2').filterDate('2023-01-01', '2023-12-31').select('AOT_550');\n\n        // Create a color palette\n        const colorPalette = ['blue', 'green', 'yellow', 'orange', 'red'];\n\n        // Create a visualization parameters object\n        const visualizationParams = {\n          min: 0,\n          max: 1000,\n          // Adjust max value based on your data range\n          palette: colorPalette\n        };\n\n        // Add the data to the map\n        map.addLayer(greenhouseGasData, visualizationParams, 'Greenhouse Gas Concentrations');\n      }, []);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: mapRef,\n        style: {\n          width: '100%',\n          height: '500px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 10\n      }, this);\n    }\n    _s(MapComponent, \"9mn7MMe4fPaZ50ApsOpRWF2HbFg=\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"MapComponent();\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default MyComponent;","map":{"version":3,"names":["React","useEffect","useRef","ee","jsxDEV","_jsxDEV","MyComponent","Component","render","_s","$RefreshSig$","MapComponent","mapRef","initialize","accessToken","map","Map","current","center","zoom","greenhouseGasData","ImageCollection","filterDate","select","colorPalette","visualizationParams","min","max","palette","addLayer","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","children"],"sources":["C:/Projects/CCRMS/CCRMS_ORIGINAL/ccmrs/src/template.js"],"sourcesContent":["import React,{ useEffect, useRef } from 'react';\r\nimport * as ee from '@google/earthengine';\r\n\r\nclass MyComponent extends React.Component {\r\n  render() {\r\n\r\nfunction MapComponent() {\r\n  const mapRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    ee.initialize({ accessToken: 'YOUR_ACCESS_TOKEN' });\r\n\r\n    // Create a map instance\r\n    const map = new ee.Map(mapRef.current, {\r\n      center: [37.7749, -122.4194], // Initial center (San Francisco)\r\n      zoom: 8,\r\n    });\r\n\r\n    // Load your greenhouse gas data (replace with your actual data)\r\n    const greenhouseGasData = ee.ImageCollection('MODIS/MYD04_L2')\r\n      .filterDate('2023-01-01', '2023-12-31')\r\n      .select('AOT_550');\r\n\r\n    // Create a color palette\r\n    const colorPalette = ['blue', 'green', 'yellow', 'orange', 'red'];\r\n\r\n    // Create a visualization parameters object\r\n    const visualizationParams = {\r\n      min: 0,\r\n      max: 1000, // Adjust max value based on your data range\r\n      palette: colorPalette,\r\n    };\r\n\r\n    // Add the data to the map\r\n    map.addLayer(greenhouseGasData, visualizationParams, 'Greenhouse Gas Concentrations');\r\n  }, []);\r\n\r\n  return <div ref={mapRef} style={{ width: '100%', height: '500px' }} />;\r\n}\r\n    return (\r\n      <div>\r\n        MapComponent();\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyComponent;"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAO,KAAKC,EAAE,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,WAAW,SAASN,KAAK,CAACO,SAAS,CAAC;EACxCC,MAAMA,CAAA,EAAG;IAAA,IAAAC,EAAA,GAAAC,YAAA;IAEX,SAASC,YAAYA,CAAA,EAAG;MAAAF,EAAA;MACtB,MAAMG,MAAM,GAAGV,MAAM,CAAC,IAAI,CAAC;MAE3BD,SAAS,CAAC,MAAM;QACdE,EAAE,CAACU,UAAU,CAAC;UAAEC,WAAW,EAAE;QAAoB,CAAC,CAAC;;QAEnD;QACA,MAAMC,GAAG,GAAG,IAAIZ,EAAE,CAACa,GAAG,CAACJ,MAAM,CAACK,OAAO,EAAE;UACrCC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;UAAE;UAC9BC,IAAI,EAAE;QACR,CAAC,CAAC;;QAEF;QACA,MAAMC,iBAAiB,GAAGjB,EAAE,CAACkB,eAAe,CAAC,gBAAgB,CAAC,CAC3DC,UAAU,CAAC,YAAY,EAAE,YAAY,CAAC,CACtCC,MAAM,CAAC,SAAS,CAAC;;QAEpB;QACA,MAAMC,YAAY,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,CAAC;;QAEjE;QACA,MAAMC,mBAAmB,GAAG;UAC1BC,GAAG,EAAE,CAAC;UACNC,GAAG,EAAE,IAAI;UAAE;UACXC,OAAO,EAAEJ;QACX,CAAC;;QAED;QACAT,GAAG,CAACc,QAAQ,CAACT,iBAAiB,EAAEK,mBAAmB,EAAE,+BAA+B,CAAC;MACvF,CAAC,EAAE,EAAE,CAAC;MAEN,oBAAOpB,OAAA;QAAKyB,GAAG,EAAElB,MAAO;QAACmB,KAAK,EAAE;UAAEC,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAQ;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACxE;IAAC5B,EAAA,CAhCQE,YAAY;IAiCjB,oBACEN,OAAA;MAAAiC,QAAA,EAAK;IAEL;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAEV;AACF;AAEA,eAAe/B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}